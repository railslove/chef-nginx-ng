#
# Generated by Chef for <%= node[:fqdn] %>
# <%= node[:roles].inspect %>

server {
  listen <%= @application["http_port"] || 80 %>;

  <% @application["server_names"].each do |name|%>
  server_name <%= name %>;
  <% end %>

  root <%= "#{@application["root_dir"] || node[:passenger][:www_dir]}/#{@application["id"]}/current/public" %>;

  <% if node[:passenger][:version].to_s =~ /^5\./ %>
  passenger_env_var PATH "/usr/bin";
  <% else %>
  passenger_set_cgi_param PATH "/usr/bin";
  <% end %>

  passenger_enabled on;
  passenger_spawn_method <%= node[:passenger][:spawn_method] %>;
  passenger_min_instances <%= node[:passenger][:min_instances] %>;
  passenger_friendly_error_pages <%= node[:passenger][:passenger_friendly_error_pages] %>;

  server_tokens <%= node[:nginx_ng][:server_tokens] %>;

  <% if node[:nginx_ng][:x_frame_options] %>
    add_header X-Frame-Options <%= node[:nginx_ng][:x_frame_options] %>;
  <% end -%>

  <% if node[:passenger][:ruby_version].to_s =~ /^2\./ %>
  passenger_load_shell_envvars <%= node[:passenger][:passenger_load_shell_envvars] %>;
  <% end %>

  <% if @environment_variables %>
    <% (@environment_variables["env"] || {}).each do |var, value| %>
  <% if node[:passenger][:version].to_s =~ /^5\./ %>
  passenger_env_var <%= var %> "<%= value %>";
  <% else %>
  passenger_set_cgi_param <%= var %> "<%= value %>";
  <% end %>
    <% end %>
  <% end %>

  <% if @application["id"] %>
  access_log <%= node['nginx_ng']['log_dir'] %>/access-<%= @application["id"] %>.log <%= node[:nginx_ng][:log_formats].keys.first || 'combined' %>;
  error_log <%= node['nginx_ng']['log_dir'] %>/error-<%= @application["id"] %>.log error;
  <% end -%>

  rack_env <%= @application["rails_env"] || node.chef_environment %>;

  client_max_body_size <%= node[:nginx_ng][:client_max_body_size] %>;

  <% if node['nginx_ng']['format_blacklist'].any? %>
  location ~ (\<%= node['nginx_ng']['format_blacklist'].join("|") %>) {
    return 404;
  }
  <% end -%>

  location ~ ^/(assets)/  {
    root <%= "#{@application["root_dir"] || node[:passenger][:www_dir]}/#{@application["id"]}/current/public" %>;

    gzip_static on; # to serve pre-gzipped version
    expires max;
    add_header Cache-Control public;
  }

  <% if @certificate && @application["ssl_only"] %>
  if ($ssl_protocol = "") {
    rewrite ^   https://$server_name$request_uri? permanent;
  }
  <% end %>

  <% if @application["use_canonical_host"] %>
  if ($host != $server_name ) {
    rewrite ^(.*)$ $scheme://$server_name$1 permanent;
  }
  <% end -%>

  <% if @application["maintenance_mode"] %>
  if (-f $document_root/503.html) {
    return 503;
  }

  error_page 503 @maintenance;

  location @maintenance {
    if ($uri !~ ^/error_assets/) {
      rewrite ^(.*)$ /503.html break;
    }
  }
  <% end -%>

  <% (@application["proxy"] || {}).each do |location, upstream| %>
  location <%= location %> {
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

    client_max_body_size       <%= node[:nginx_ng][:client_max_body_size] %>;
    client_body_buffer_size    <%= node[:nginx_ng][:client_body_buffer_size] %>;

    proxy_connect_timeout      <%= node[:nginx_ng][:proxy_connect_timeout] %>;
    proxy_send_timeout         <%= node[:nginx_ng][:proxy_send_timeout] %>;
    proxy_read_timeout         <%= node[:nginx_ng][:proxy_read_timeout] %>;

    proxy_buffer_size          <%= node[:nginx_ng][:proxy_buffer_size] %>;
    proxy_buffers              <%= node[:nginx_ng][:proxy_buffers] %>;
    proxy_busy_buffers_size    <%= node[:nginx_ng][:proxy_busy_buffers_size] %>;
    proxy_temp_file_write_size <%= node[:nginx_ng][:proxy_temp_file_write_size] %>;
    proxy_redirect             <%= node[:nginx_ng][:proxy_redirect] %>;


    proxy_pass <%=upstream%>;
  }
  <% end -%>

}

<% if @certificate %>
server {
  listen <%= @application["https_port"] || 443 %>;

  <% @application["server_names"].each do |name|%>
  server_name <%= name %>;
  <% end %>

  server_tokens <%= node[:nginx_ng][:server_tokens] %>;

  <% if @application["id"] %>
  access_log <%= node['nginx_ng']['log_dir'] %>/access-<%= @application["id"] %>.log <%= node[:nginx_ng][:log_formats].keys.first || 'combined' %>;
  error_log <%= node['nginx_ng']['log_dir'] %>/error-<%= @application["id"] %>.log error;
  <% end -%>

  root <%= "#{@application["root_dir"] || node[:passenger][:www_dir]}/#{@application["id"]}/current/public" %>;

  <% if node[:passenger][:version].to_s =~ /^5\./ %>
  passenger_env_var PATH "/usr/bin";
  <% else %>
  passenger_set_cgi_param PATH "/usr/bin";
  <% end %>

  passenger_enabled on;
  passenger_spawn_method <%= node[:passenger][:spawn_method] %>;
  passenger_min_instances <%= node[:passenger][:min_instances] %>;
  passenger_friendly_error_pages <%= node[:passenger][:passenger_friendly_error_pages] %>;

  <% if node[:passenger][:ruby_version].to_s =~ /^2\./ %>
  passenger_load_shell_envvars <%= node[:passenger][:passenger_load_shell_envvars] %>;
  <% end %>

  <% if @environment_variables %>
    <% (@environment_variables["env"] || {}).each do |var, value| %>
  <% if node[:passenger][:version].to_s =~ /^5\./ %>
  passenger_env_var <%= var %> "<%= value %>";
  <% else %>
  passenger_set_cgi_param <%= var %> "<%= value %>";
  <% end %>
    <% end %>
  <% end %>

  rack_env <%= @application["rails_env"] || node.chef_environment %>;

  client_max_body_size <%= node[:nginx_ng][:client_max_body_size] %>;

  <% if node['nginx_ng']['format_blacklist'].any? %>
  location ~ (\<%= node['nginx_ng']['format_blacklist'].join("|") %>) {
    return 404;
  }
  <% end -%>

  location ~ ^/(assets)/  {
    root <%= "#{@application["root_dir"] || node[:passenger][:www_dir]}/#{@application["id"]}/current/public" %>;

    gzip_static on; # to serve pre-gzipped version
    expires max;
    add_header Cache-Control public;
  }

  ssl on;

  # enable session resumption to improve https performance
  # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
  ssl_session_cache <%= node[:nginx_ng][:ssl_session_cache].join(" ") %>;
  ssl_session_timeout <%= node[:nginx_ng][:ssl_session_timeout] %>;

  ssl_protocols <%= node[:nginx_ng][:ssl_protocols].join(" ") %>;
  ssl_ciphers <%= node[:nginx_ng][:ssl_ciphers].join(":") %>;
  ssl_prefer_server_ciphers <%= node[:nginx_ng][:ssl_prefer_server_ciphers] %>;

  <% if node[:nginx_ng][:dhparams] %>
  ssl_dhparam <%= "#{node[:nginx_ng][:dir]}/conf.d/dhparams.pem" %>;
  <% end -%>

  ssl_certificate      /<%= node[:nginx_ng][:dir] %>/ssl/<%= @certificate["id"] %>.crt;
  ssl_certificate_key  /<%= node[:nginx_ng][:dir] %>/ssl/<%= @certificate["id"] %>.key;

  <% if node[:nginx_ng][:hsts_headers] %>
    add_header Strict-Transport-Security <%= node[:nginx_ng][:hsts_headers] %>;
  <% end -%>

  <% if node[:nginx_ng][:x_frame_options] %>
    add_header X-Frame-Options <%= node[:nginx_ng][:x_frame_options] %>;
  <% end -%>

  if ($ssl_protocol = "") {
    rewrite ^   https://$server_name$request_uri? permanent;
  }

  <% if @application["use_canonical_host"] %>
  if ($host != $server_name ) {
    rewrite ^(.*)$ $scheme://$server_name$1 permanent;
  }
  <% end -%>

  <% if @application["maintenance_mode"] %>
  if (-f $document_root/503.html) {
    return 503;
  }

  error_page 503 @maintenance;

  location @maintenance {
    if ($uri !~ ^/error_assets/) {
      rewrite ^(.*)$ /503.html break;
    }
  }
  <% end -%>

  <% (@application["proxy"] || {}).each do |location, upstream| %>
  location <%= location %> {
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

    client_max_body_size       <%= node[:nginx_ng][:client_max_body_size] %>;
    client_body_buffer_size    <%= node[:nginx_ng][:client_body_buffer_size] %>;

    proxy_connect_timeout      <%= node[:nginx_ng][:proxy_connect_timeout] %>;
    proxy_send_timeout         <%= node[:nginx_ng][:proxy_send_timeout] %>;
    proxy_read_timeout         <%= node[:nginx_ng][:proxy_read_timeout] %>;

    proxy_buffer_size          <%= node[:nginx_ng][:proxy_buffer_size] %>;
    proxy_buffers              <%= node[:nginx_ng][:proxy_buffers] %>;
    proxy_busy_buffers_size    <%= node[:nginx_ng][:proxy_busy_buffers_size] %>;
    proxy_temp_file_write_size <%= node[:nginx_ng][:proxy_temp_file_write_size] %>;
    proxy_redirect             <%= node[:nginx_ng][:proxy_redirect] %>;


    proxy_pass <%=upstream%>;
  }
  <% end -%>
}
<% end %>
